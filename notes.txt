Asynchronous JS
-----------------

JS--->Single Threaded programming language.

order---> shipping --> delivery

setTimeout(()=>{},time).

fetch--->  used to get data from API.


Promise
--------

it represents the future value.

promise.then((resolved value)=>{}).catch((rejected)=>{})


React
-------
React is an open-source JS library. used to build SPA(Single Page Applications).
It allows to create reusable components.

created by Facebook

Why Use React?
---------------
Fast and efficient (Virtual DOM) updates.
reusable components
It has large community support.

node---> JS runtime.
frontend---->backend(node)
NPM---> Node Package Manager.
npm install "Package name".

Create React app 
-----------------

npm create vite@latest
npm install 
npm run dev



JSX---> JavaSCript XML
XML--> Extensible Markup Language.

JSX is a syntax extensionfor JS, used with react. it allows you to write HTML code innside JS.

const element="<h1>Heading Tag</h1>"
(in js it is not possible.)

Rules of JSX.
-------------
1) JSX function can return only a single parent element
2) use {} to embed any JavaSCript expression into HTML.
3) JSX uses camelCase for HTML attributes (ex:className, onClick)  style==> {backgroundColor:"red"}

Components and Props
-------------------------

Components are reusable of UI. Props are used to pass data into components.

jsx functional component---> js function (returns HTML element)


States and useState Hook
----------------------------

State: It is a built-in object that allows components to hold dynamic  data that affects ho the conponent renders and behaves.

useState: const [state, setState]=useState(intValue)

whenever the state is created or changed, the component will re-render


onClick={() => {
          setName("Gokul");
        }}

Accessing Previous value: 

setNumber((prev) => {
            return prev + 1;
          });

UseEffet Hook
--------------
Runs Sideeffects in functional components.

useEffect(callBckFunc, [])

[](empty array)---> run once when the component mounts
[variable]--> run when variable changes.


Event Handling In react
------------------------
React uses camelCase for event names and passes a function.
rules: should not invoke the function. just mention it's name instead.

onClick={() => {
          setName("Gokul");
        }}

Inline Handler---> onClick={() => {
          console.log("Hi")
        }}

Seperate Handler--->onClick={() => {
          printHi("Tharick");
        }}

Conditional Rendereing
-----------------------

Using Ternary Operator ----> condition? command1 : command2

{doLove ? <h1>I love to code</h1> : <h1>I hate to code</h1>}

Using AND Operator ----> condition && component.


Rendering List
----------------

[1,2,3,4,5] map 

<h1>Theri</h1>
<h1>2</h1>
<h1>3</h1>
<h1>4</h1>
<h1>5</h1>


Used to create a list of components using map dynamically.

Unique Keys---> the key prop helps react identify the item. that should be unique and stable.


Controlled Inputs
------------------

React controls the inputs via state(useState).
1)creating state 2)Input-->onchange, value

Handling multiple inputs 
--------------------------

create single state object.

let a="keyone"

{
  [a]: a
}

